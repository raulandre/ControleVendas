@page "/"
@using ControleVendas.Client.Services;
@using ControleVendas.Shared.Models;
@using System.Security.Claims;
@using Blazored.LocalStorage;
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorageService

<PageTitle>Autenticação</PageTitle>

@if (ShowErrors)
{
    <div class="alert alert-danger" role="alert">
        @ErrorMessage
    </div>
}
@if (ShowSuccesses)
{
    <div class="alert alert-success" role="alert">
        @SuccessMessage
    </div>
}

<div class="row">
    <div class="col-md-6">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Faça login para continuar</h5>
                <EditForm Model="LoginModel" OnValidSubmit="HandleLogin">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group">
                        <label for="nome">Nome</label>
                        <InputText Id="nome" class="form-control" @bind-Value="LoginModel.Nome" />
                        <ValidationMessage For="@(() => LoginModel.Nome)" />
                    </div>
                    <div class="form-group">
                        <label for="senha">Senha</label>
                        <InputText Id="senha" type="password" class="form-control" @bind-Value="LoginModel.Senha" />
                        <ValidationMessage For="@(() => LoginModel.Senha)" />
                    </div>
                    <button type="submit" class="btn btn-primary mt-2">Login</button>
                </EditForm>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Cadastro</h5>
                <EditForm Model="RegisterModel" OnValidSubmit="HandleRegister">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="form-group">
                        <label for="nome">Nome</label>
                        <InputText Id="nome" class="form-control" @bind-Value="RegisterModel.Nome" />
                        <ValidationMessage For="@(() => RegisterModel.Nome)" />
                    </div>
                    <div class="form-group">
                        <label for="senha">Senha</label>
                        <InputText Id="senha" type="password" class="form-control" @bind-Value="RegisterModel.Senha" />
                        <ValidationMessage For="@(() => RegisterModel.Senha)" />
                    </div>
                    <button type="submit" class="btn btn-primary mt-2">Cadastrar</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel LoginModel = new LoginModel();
    private LoginModel RegisterModel = new LoginModel();

    private bool ShowErrors;
    private string ErrorMessage;
    private bool ShowSuccesses;
    private string SuccessMessage;

    protected override async Task OnInitializedAsync()
    {
        if (await LocalStorageService.ContainKeyAsync("authToken"))
            NavigationManager.NavigateTo("produtos");
    }

    private async Task HandleLogin()
    {
        ShowErrors = false;
        ShowSuccesses = false;

        var result = await AuthService.Login(LoginModel);

        if (result.Success)
        {
            ShowErrors = false;
            ShowSuccesses = true;
            SuccessMessage = result.Message;
            NavigationManager.NavigateTo("produtos");
        }
        else
        {
            ErrorMessage = result.Message;
            ShowErrors = true;
            ShowSuccesses = false;
        }

        LoginModel.Nome = string.Empty;
        LoginModel.Senha = string.Empty;
        StateHasChanged();
    }

    private async Task HandleRegister()
    {
        ShowErrors = false;
        ShowSuccesses = false;

        var result = await AuthService.Register(RegisterModel);

        if (result.Success)
        {
            ShowErrors = false;
            ShowSuccesses = true;
            SuccessMessage = result.Message;
            NavigationManager.NavigateTo("produtos");
        }
        else
        {
            ErrorMessage = result.Message;
            ShowErrors = true;
            ShowSuccesses = false;
        }

        RegisterModel.Nome = string.Empty;
        RegisterModel.Senha = string.Empty;
        StateHasChanged();
    }
}